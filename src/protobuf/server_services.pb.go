// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_services.proto

package serverservices

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GrepLine struct {
	Line                 string   `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrepLine) Reset()         { *m = GrepLine{} }
func (m *GrepLine) String() string { return proto.CompactTextString(m) }
func (*GrepLine) ProtoMessage()    {}
func (*GrepLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_services_a8fc239cade8d83a, []int{0}
}
func (m *GrepLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrepLine.Unmarshal(m, b)
}
func (m *GrepLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrepLine.Marshal(b, m, deterministic)
}
func (dst *GrepLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrepLine.Merge(dst, src)
}
func (m *GrepLine) XXX_Size() int {
	return xxx_messageInfo_GrepLine.Size(m)
}
func (m *GrepLine) XXX_DiscardUnknown() {
	xxx_messageInfo_GrepLine.DiscardUnknown(m)
}

var xxx_messageInfo_GrepLine proto.InternalMessageInfo

func (m *GrepLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type Cmd struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cmd) Reset()         { *m = Cmd{} }
func (m *Cmd) String() string { return proto.CompactTextString(m) }
func (*Cmd) ProtoMessage()    {}
func (*Cmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_services_a8fc239cade8d83a, []int{1}
}
func (m *Cmd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cmd.Unmarshal(m, b)
}
func (m *Cmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cmd.Marshal(b, m, deterministic)
}
func (dst *Cmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cmd.Merge(dst, src)
}
func (m *Cmd) XXX_Size() int {
	return xxx_messageInfo_Cmd.Size(m)
}
func (m *Cmd) XXX_DiscardUnknown() {
	xxx_messageInfo_Cmd.DiscardUnknown(m)
}

var xxx_messageInfo_Cmd proto.InternalMessageInfo

func (m *Cmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func init() {
	proto.RegisterType((*GrepLine)(nil), "serverservices.GrepLine")
	proto.RegisterType((*Cmd)(nil), "serverservices.Cmd")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerServicesClient is the client API for ServerServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerServicesClient interface {
	ReturnMatches(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (ServerServices_ReturnMatchesClient, error)
}

type serverServicesClient struct {
	cc *grpc.ClientConn
}

func NewServerServicesClient(cc *grpc.ClientConn) ServerServicesClient {
	return &serverServicesClient{cc}
}

func (c *serverServicesClient) ReturnMatches(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (ServerServices_ReturnMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServerServices_serviceDesc.Streams[0], "/serverservices.ServerServices/ReturnMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverServicesReturnMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerServices_ReturnMatchesClient interface {
	Recv() (*GrepLine, error)
	grpc.ClientStream
}

type serverServicesReturnMatchesClient struct {
	grpc.ClientStream
}

func (x *serverServicesReturnMatchesClient) Recv() (*GrepLine, error) {
	m := new(GrepLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServicesServer is the server API for ServerServices service.
type ServerServicesServer interface {
	ReturnMatches(*Cmd, ServerServices_ReturnMatchesServer) error
}

func RegisterServerServicesServer(s *grpc.Server, srv ServerServicesServer) {
	s.RegisterService(&_ServerServices_serviceDesc, srv)
}

func _ServerServices_ReturnMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cmd)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServicesServer).ReturnMatches(m, &serverServicesReturnMatchesServer{stream})
}

type ServerServices_ReturnMatchesServer interface {
	Send(*GrepLine) error
	grpc.ServerStream
}

type serverServicesReturnMatchesServer struct {
	grpc.ServerStream
}

func (x *serverServicesReturnMatchesServer) Send(m *GrepLine) error {
	return x.ServerStream.SendMsg(m)
}

var _ServerServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverservices.ServerServices",
	HandlerType: (*ServerServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReturnMatches",
			Handler:       _ServerServices_ReturnMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_services.proto",
}

func init() {
	proto.RegisterFile("server_services.proto", fileDescriptor_server_services_a8fc239cade8d83a)
}

var fileDescriptor_server_services_a8fc239cade8d83a = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x8a, 0x07, 0x51, 0x99, 0xc9, 0xa9, 0xc5, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x7c, 0x10, 0x61, 0x98, 0xa8, 0x92, 0x1c, 0x17, 0x87, 0x7b, 0x51, 0x6a, 0x81, 0x4f, 0x66, 0x5e,
	0xaa, 0x90, 0x10, 0x17, 0x4b, 0x4e, 0x66, 0x5e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10,
	0x98, 0xad, 0x24, 0xce, 0xc5, 0xec, 0x9c, 0x9b, 0x22, 0x24, 0xc0, 0xc5, 0x9c, 0x9c, 0x9b, 0x02,
	0x95, 0x01, 0x31, 0x8d, 0x42, 0xb8, 0xf8, 0x82, 0xc1, 0x46, 0x05, 0x43, 0x8d, 0x12, 0x72, 0xe2,
	0xe2, 0x0d, 0x4a, 0x2d, 0x29, 0x2d, 0xca, 0xf3, 0x4d, 0x2c, 0x49, 0xce, 0x48, 0x2d, 0x16, 0x12,
	0xd6, 0x43, 0xb5, 0x4c, 0xcf, 0x39, 0x37, 0x45, 0x4a, 0x02, 0x5d, 0x10, 0x66, 0xbd, 0x12, 0x83,
	0x01, 0x63, 0x12, 0x1b, 0xd8, 0x95, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x26, 0xd8,
	0x5c, 0xbe, 0x00, 0x00, 0x00,
}
